@page "/entries"

@using Doggountant.Data
@inject AccountingEntryService AccountingEntryService
@inject AccountingEntryTypeService AccountingEntryTypeService
@inject IDialogService DialogService

<h1>Účetní zápisy</h1>



<MudGrid Justify="Justify.FlexStart">
	<MudItem>
		<MudRadioGroup @bind-SelectedOption="Dense_Radio">
			<MudRadio Option="true" Color="Color.Primary" Dense="false">Příjem</MudRadio>
			<MudRadio Option="false" Color="Color.Secondary" Dense="false">Výdej</MudRadio>
		</MudRadioGroup>
	</MudItem>
	<MudItem>
		<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Size="Size.Large" OnClick="addEntry">Save</MudButton>
	</MudItem>
</MudGrid>

@*<MudPaper Class="pa-3">
				Item 2
			</MudPaper>*@

@if (entries == null)
{
	<p><em>Loading...</em></p>
}
else
{
<MudStack Spacing="1">
	<MudStack Spacing="0">
		<MudStack Row="true">
				<MudPaper Class="pa-3" Elevation="0" Width="40%">
				<MudDatePicker Label="dd.MM.yyyy" Editable="true" @bind-Date="SelectedDate" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Placeholder="Datum" />
			</MudPaper>
			<MudPaper Class="pa-3" Elevation="0" Width="60%">
				<MudNumericField HideSpinButtons="true" @bind-Value="Amount" Label="Suma" Variant="Variant.Text" />
			</MudPaper>			
		</MudStack>
		<MudStack Row="true">
			<MudPaper Class="pa-3" Elevation="0" Width="40%">
				<MudSelect Margin="Margin.Dense" T="string" Label="Kategorie" FullWidth=true Variant="Variant.Text" @bind-value="SelectedValueType">
				@foreach (var type in types)
				{
					<MudSelectItem T="string" Value=@type.Type />
				}
				</MudSelect>
			</MudPaper>

			<MudPaper Class="pa-3" Elevation="0" Width="60%">
				<MudTextField @bind-Value="TextValueNote" Label="Poznámka" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
			</MudPaper>
			
		</MudStack>
	</MudStack>
	@*RowStyleFunc="RowStyleFunc"*@
	<MudTable Breakpoint="Breakpoint.None" Items="@entries" Dense="true" Filter="new Func<AccountingEntry,bool>(FilterFunc1)"  T="AccountingEntry" OnRowClick="@OpenDialog" Hover="true" @bind-SelectedItem="selectedItem1" >
		<ToolBarContent>
			<MudText Typo="Typo.h6">Výpisy	
			</MudText>
				
			<MudSpacer />
				@*<MudSelect T="EntryType" ToStringFunc="@converter" Label="Druh" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Clearable>
					<MudSelectItem Value="@(new EntryType() { entryType="Příjem"})" />
					<MudSelectItem Value="@(new EntryType() { entryType="Výdej"})" />
				</MudSelect>*@
				
			   <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>

		<HeaderContent>
				<MudTh>Datum</MudTh>
				<MudTh @onclick="@(() => TypeFilter())" Class="pa-1">
					Druh
					@if (currentTypeSelection == 1)
					{
						<MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Small" Color="Color.Success" />
					}
					else if (currentTypeSelection == 2)
					{
						<MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Small" Color="Color.Error" />
					}
					else
					{
						<MudIcon Icon="@Icons.Material.Filled.FilterListOff" Size="Size.Small" />
						
					}
				</MudTh>
				<MudTh >Suma</MudTh>
				<MudTh >Kategorie</MudTh>
				<MudTh >Poznámka</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Datum">@context.Date.ToShortDateString()</MudTd>
				<MudTd DataLabel="Druh" Class="pa-1">
				<MudIcon style="" Icon="@Icons.Material.Filled.AttachMoney" Color="@(context.EntryType == false ? @Color.Error : @Color.Success)"/>
			</MudTd>
				@if(context.EntryType){
					<MudTd Style="@($"color:{Theme.Palette.Success};")" DataLabel="Suma">@context.Value</MudTd>	
				}
				else{
					<MudTd Style="@($"color:{Theme.Palette.ErrorLighten};")" DataLabel="Suma">-@context.Value</MudTd>
				}
				
			<MudTd DataLabel="Kategorie">@context.Type</MudTd>
			<MudTd DataLabel="Poznámka">@(context.Note != null ? (context.Note.Length <= 8 ? context.Note : context.Note.Substring(0, 8) + "...") : "")</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>
</MudStack>
}

@code {
	//test
	private MudTheme Theme = new MudTheme();
	Func<EntryType, string> converter = p => p?.entryType;
	private string searchString1 = "";
	private AccountingEntry selectedItem1 = null;

	private bool FilterFunc1(AccountingEntry element) => FilterFunc(element, searchString1);

	private int currentTypeSelection = 0;
	public void TypeFilter()
	{
		if (currentTypeSelection == 0 || currentTypeSelection > 2)
		{
			currentTypeSelection++;
		}
		else if (currentTypeSelection == 1)
		{
			currentTypeSelection++;
		}
		else if (currentTypeSelection == 2)
		{
			currentTypeSelection = 0;
		}
	}

	public class EntryType
	{
		public string entryType { get; set; }

		// Note: this is important so the select can compare pizzas
		public override bool Equals(object o)
		{
			var other = o as EntryType;
			return other?.entryType == entryType;
		}

		// Note: this is important so the select can compare pizzas
		public override int GetHashCode() => entryType.GetHashCode();
	}

	
	private bool FilterFunc(AccountingEntry element, string searchString)
	{
		if(currentTypeSelection == 1)
		{
			if(element.EntryType == false)
			{
				return false;
			}
		}
		else if(currentTypeSelection == 2)
		{
			if (element.EntryType == true)
			{
				return false;
			}
		}

		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.EntryType == true)
		{
			if ("Příjem".ToUpper() == searchString.ToUpper())
				return true;
		}
		else
		{
			if ("Výdej".ToUpper() == searchString.ToUpper())
				return true;
		}
		if (element.Date.Date.ToString().Substring(0,10) == searchString)
			return true;
		
		if ($"{element.Value.ToString().ToUpper()} {element.Type.ToString().ToUpper()} {element.Note.ToUpper()} ".Contains(searchString.ToUpper()))
			return true;

		return false;
	}
	

	//working
	DateTime? SelectedDate = DateTime.Today;
	public bool Dense_Radio { get; set; } = true;
	public decimal Amount { get; set; }
	public string TextValueNote { get; set; }
	public string SelectedValueType { get; set; }
	public string SelectedValueTypeSearch { get; set; }
	private List<AccountingEntry> entries = new List<AccountingEntry>();
	private List<AccountingEntryType> types = new List<AccountingEntryType>();



	protected override async Task OnInitializedAsync()
	{
		entries = AccountingEntryService.GetEntryAsync();
		types = AccountingEntryTypeService.GetTypesAsync();
	}

	private void resetEntries()
	{
		SelectedValueTypeSearch = null;
	}

	private async void addEntry()
	{
		await AccountingEntryService.AddEntryAsync(new AccountingEntry
			{
				Date = SelectedDate ?? DateTime.Now,
				Value = Amount,
				Type = SelectedValueType ?? "None",
				Note = TextValueNote ?? "",
				EntryType = Dense_Radio
			});
	}

	private async void removeEntry()
	{
		await AccountingEntryService.RemoveEntryAsync(new AccountingEntry
			{
				Date = SelectedDate ?? DateTime.Now,
				Value = Amount,
				Type = SelectedValueType ?? "None",
				Note = TextValueNote ?? "",
				EntryType = Dense_Radio
			});
	}

	async void OpenDialog(TableRowClickEventArgs<AccountingEntry> args)
	{
		var parameters = new DialogParameters { ["entry"] = args.Item };
		var dialog = await DialogService.ShowAsync<PopupWindow>("Zápis", parameters);
		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			await AccountingEntryService.RemoveEntryAsync(args.Item);
			StateHasChanged();
		}

	}
	//void OpenDialog(TableRowClickEventArgs<AccountingEntry> args)
	//{
	//	var parameters = new DialogParameters { ["entry"] = args.Item };
	//	DialogService.Show<PopupWindow>("Zápis", parameters);

	//}

}
